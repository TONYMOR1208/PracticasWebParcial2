
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Idioma
 * 
 */
export type Idioma = $Result.DefaultSelection<Prisma.$IdiomaPayload>
/**
 * Model Palabra
 * 
 */
export type Palabra = $Result.DefaultSelection<Prisma.$PalabraPayload>
/**
 * Model Registro
 * 
 */
export type Registro = $Result.DefaultSelection<Prisma.$RegistroPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Estado: {
  ACTIVO: 'ACTIVO',
  PENDIENTE: 'PENDIENTE',
  ELIMINADO: 'ELIMINADO'
};

export type Estado = (typeof Estado)[keyof typeof Estado]

}

export type Estado = $Enums.Estado

export const Estado: typeof $Enums.Estado

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Idiomas
 * const idiomas = await prisma.idioma.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Idiomas
   * const idiomas = await prisma.idioma.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.idioma`: Exposes CRUD operations for the **Idioma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Idiomas
    * const idiomas = await prisma.idioma.findMany()
    * ```
    */
  get idioma(): Prisma.IdiomaDelegate<ExtArgs>;

  /**
   * `prisma.palabra`: Exposes CRUD operations for the **Palabra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Palabras
    * const palabras = await prisma.palabra.findMany()
    * ```
    */
  get palabra(): Prisma.PalabraDelegate<ExtArgs>;

  /**
   * `prisma.registro`: Exposes CRUD operations for the **Registro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registros
    * const registros = await prisma.registro.findMany()
    * ```
    */
  get registro(): Prisma.RegistroDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Idioma: 'Idioma',
    Palabra: 'Palabra',
    Registro: 'Registro'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'idioma' | 'palabra' | 'registro'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Idioma: {
        payload: Prisma.$IdiomaPayload<ExtArgs>
        fields: Prisma.IdiomaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IdiomaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IdiomaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload>
          }
          findFirst: {
            args: Prisma.IdiomaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IdiomaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload>
          }
          findMany: {
            args: Prisma.IdiomaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload>[]
          }
          create: {
            args: Prisma.IdiomaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload>
          }
          createMany: {
            args: Prisma.IdiomaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IdiomaCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload>[]
          }
          delete: {
            args: Prisma.IdiomaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload>
          }
          update: {
            args: Prisma.IdiomaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload>
          }
          deleteMany: {
            args: Prisma.IdiomaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.IdiomaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.IdiomaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IdiomaPayload>
          }
          aggregate: {
            args: Prisma.IdiomaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIdioma>
          }
          groupBy: {
            args: Prisma.IdiomaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<IdiomaGroupByOutputType>[]
          }
          count: {
            args: Prisma.IdiomaCountArgs<ExtArgs>,
            result: $Utils.Optional<IdiomaCountAggregateOutputType> | number
          }
        }
      }
      Palabra: {
        payload: Prisma.$PalabraPayload<ExtArgs>
        fields: Prisma.PalabraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PalabraFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PalabraFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload>
          }
          findFirst: {
            args: Prisma.PalabraFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PalabraFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload>
          }
          findMany: {
            args: Prisma.PalabraFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload>[]
          }
          create: {
            args: Prisma.PalabraCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload>
          }
          createMany: {
            args: Prisma.PalabraCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PalabraCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload>[]
          }
          delete: {
            args: Prisma.PalabraDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload>
          }
          update: {
            args: Prisma.PalabraUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload>
          }
          deleteMany: {
            args: Prisma.PalabraDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PalabraUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PalabraUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PalabraPayload>
          }
          aggregate: {
            args: Prisma.PalabraAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePalabra>
          }
          groupBy: {
            args: Prisma.PalabraGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PalabraGroupByOutputType>[]
          }
          count: {
            args: Prisma.PalabraCountArgs<ExtArgs>,
            result: $Utils.Optional<PalabraCountAggregateOutputType> | number
          }
        }
      }
      Registro: {
        payload: Prisma.$RegistroPayload<ExtArgs>
        fields: Prisma.RegistroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegistroFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegistroFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          findFirst: {
            args: Prisma.RegistroFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegistroFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          findMany: {
            args: Prisma.RegistroFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>[]
          }
          create: {
            args: Prisma.RegistroCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          createMany: {
            args: Prisma.RegistroCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegistroCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>[]
          }
          delete: {
            args: Prisma.RegistroDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          update: {
            args: Prisma.RegistroUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          deleteMany: {
            args: Prisma.RegistroDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RegistroUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RegistroUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          aggregate: {
            args: Prisma.RegistroAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRegistro>
          }
          groupBy: {
            args: Prisma.RegistroGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RegistroGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegistroCountArgs<ExtArgs>,
            result: $Utils.Optional<RegistroCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type IdiomaCountOutputType
   */

  export type IdiomaCountOutputType = {
    registros: number
  }

  export type IdiomaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | IdiomaCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * IdiomaCountOutputType without action
   */
  export type IdiomaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdiomaCountOutputType
     */
    select?: IdiomaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IdiomaCountOutputType without action
   */
  export type IdiomaCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
  }


  /**
   * Count Type PalabraCountOutputType
   */

  export type PalabraCountOutputType = {
    registros: number
  }

  export type PalabraCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | PalabraCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * PalabraCountOutputType without action
   */
  export type PalabraCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalabraCountOutputType
     */
    select?: PalabraCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PalabraCountOutputType without action
   */
  export type PalabraCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Idioma
   */

  export type AggregateIdioma = {
    _count: IdiomaCountAggregateOutputType | null
    _avg: IdiomaAvgAggregateOutputType | null
    _sum: IdiomaSumAggregateOutputType | null
    _min: IdiomaMinAggregateOutputType | null
    _max: IdiomaMaxAggregateOutputType | null
  }

  export type IdiomaAvgAggregateOutputType = {
    id: number | null
  }

  export type IdiomaSumAggregateOutputType = {
    id: number | null
  }

  export type IdiomaMinAggregateOutputType = {
    id: number | null
    descripcion: string | null
    estado: $Enums.Estado | null
  }

  export type IdiomaMaxAggregateOutputType = {
    id: number | null
    descripcion: string | null
    estado: $Enums.Estado | null
  }

  export type IdiomaCountAggregateOutputType = {
    id: number
    descripcion: number
    estado: number
    _all: number
  }


  export type IdiomaAvgAggregateInputType = {
    id?: true
  }

  export type IdiomaSumAggregateInputType = {
    id?: true
  }

  export type IdiomaMinAggregateInputType = {
    id?: true
    descripcion?: true
    estado?: true
  }

  export type IdiomaMaxAggregateInputType = {
    id?: true
    descripcion?: true
    estado?: true
  }

  export type IdiomaCountAggregateInputType = {
    id?: true
    descripcion?: true
    estado?: true
    _all?: true
  }

  export type IdiomaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Idioma to aggregate.
     */
    where?: IdiomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Idiomas to fetch.
     */
    orderBy?: IdiomaOrderByWithRelationInput | IdiomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IdiomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Idiomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Idiomas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Idiomas
    **/
    _count?: true | IdiomaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IdiomaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IdiomaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IdiomaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IdiomaMaxAggregateInputType
  }

  export type GetIdiomaAggregateType<T extends IdiomaAggregateArgs> = {
        [P in keyof T & keyof AggregateIdioma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIdioma[P]>
      : GetScalarType<T[P], AggregateIdioma[P]>
  }




  export type IdiomaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IdiomaWhereInput
    orderBy?: IdiomaOrderByWithAggregationInput | IdiomaOrderByWithAggregationInput[]
    by: IdiomaScalarFieldEnum[] | IdiomaScalarFieldEnum
    having?: IdiomaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IdiomaCountAggregateInputType | true
    _avg?: IdiomaAvgAggregateInputType
    _sum?: IdiomaSumAggregateInputType
    _min?: IdiomaMinAggregateInputType
    _max?: IdiomaMaxAggregateInputType
  }

  export type IdiomaGroupByOutputType = {
    id: number
    descripcion: string
    estado: $Enums.Estado
    _count: IdiomaCountAggregateOutputType | null
    _avg: IdiomaAvgAggregateOutputType | null
    _sum: IdiomaSumAggregateOutputType | null
    _min: IdiomaMinAggregateOutputType | null
    _max: IdiomaMaxAggregateOutputType | null
  }

  type GetIdiomaGroupByPayload<T extends IdiomaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IdiomaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IdiomaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IdiomaGroupByOutputType[P]>
            : GetScalarType<T[P], IdiomaGroupByOutputType[P]>
        }
      >
    >


  export type IdiomaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descripcion?: boolean
    estado?: boolean
    registros?: boolean | Idioma$registrosArgs<ExtArgs>
    _count?: boolean | IdiomaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["idioma"]>

  export type IdiomaSelectScalar = {
    id?: boolean
    descripcion?: boolean
    estado?: boolean
  }


  export type IdiomaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | Idioma$registrosArgs<ExtArgs>
    _count?: boolean | IdiomaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $IdiomaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Idioma"
    objects: {
      registros: Prisma.$RegistroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descripcion: string
      estado: $Enums.Estado
    }, ExtArgs["result"]["idioma"]>
    composites: {}
  }


  type IdiomaGetPayload<S extends boolean | null | undefined | IdiomaDefaultArgs> = $Result.GetResult<Prisma.$IdiomaPayload, S>

  type IdiomaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IdiomaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IdiomaCountAggregateInputType | true
    }

  export interface IdiomaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Idioma'], meta: { name: 'Idioma' } }
    /**
     * Find zero or one Idioma that matches the filter.
     * @param {IdiomaFindUniqueArgs} args - Arguments to find a Idioma
     * @example
     * // Get one Idioma
     * const idioma = await prisma.idioma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IdiomaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, IdiomaFindUniqueArgs<ExtArgs>>
    ): Prisma__IdiomaClient<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Idioma that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IdiomaFindUniqueOrThrowArgs} args - Arguments to find a Idioma
     * @example
     * // Get one Idioma
     * const idioma = await prisma.idioma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IdiomaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, IdiomaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__IdiomaClient<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Idioma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdiomaFindFirstArgs} args - Arguments to find a Idioma
     * @example
     * // Get one Idioma
     * const idioma = await prisma.idioma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IdiomaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, IdiomaFindFirstArgs<ExtArgs>>
    ): Prisma__IdiomaClient<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Idioma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdiomaFindFirstOrThrowArgs} args - Arguments to find a Idioma
     * @example
     * // Get one Idioma
     * const idioma = await prisma.idioma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IdiomaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, IdiomaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__IdiomaClient<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Idiomas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdiomaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Idiomas
     * const idiomas = await prisma.idioma.findMany()
     * 
     * // Get first 10 Idiomas
     * const idiomas = await prisma.idioma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const idiomaWithIdOnly = await prisma.idioma.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IdiomaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IdiomaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Idioma.
     * @param {IdiomaCreateArgs} args - Arguments to create a Idioma.
     * @example
     * // Create one Idioma
     * const Idioma = await prisma.idioma.create({
     *   data: {
     *     // ... data to create a Idioma
     *   }
     * })
     * 
    **/
    create<T extends IdiomaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, IdiomaCreateArgs<ExtArgs>>
    ): Prisma__IdiomaClient<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Idiomas.
     * @param {IdiomaCreateManyArgs} args - Arguments to create many Idiomas.
     * @example
     * // Create many Idiomas
     * const idioma = await prisma.idioma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends IdiomaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IdiomaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Idiomas and returns the data saved in the database.
     * @param {IdiomaCreateManyAndReturnArgs} args - Arguments to create many Idiomas.
     * @example
     * // Create many Idiomas
     * const idioma = await prisma.idioma.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Idiomas and only return the `id`
     * const idiomaWithIdOnly = await prisma.idioma.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends IdiomaCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, IdiomaCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Idioma.
     * @param {IdiomaDeleteArgs} args - Arguments to delete one Idioma.
     * @example
     * // Delete one Idioma
     * const Idioma = await prisma.idioma.delete({
     *   where: {
     *     // ... filter to delete one Idioma
     *   }
     * })
     * 
    **/
    delete<T extends IdiomaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, IdiomaDeleteArgs<ExtArgs>>
    ): Prisma__IdiomaClient<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Idioma.
     * @param {IdiomaUpdateArgs} args - Arguments to update one Idioma.
     * @example
     * // Update one Idioma
     * const idioma = await prisma.idioma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IdiomaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, IdiomaUpdateArgs<ExtArgs>>
    ): Prisma__IdiomaClient<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Idiomas.
     * @param {IdiomaDeleteManyArgs} args - Arguments to filter Idiomas to delete.
     * @example
     * // Delete a few Idiomas
     * const { count } = await prisma.idioma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IdiomaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IdiomaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Idiomas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdiomaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Idiomas
     * const idioma = await prisma.idioma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IdiomaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, IdiomaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Idioma.
     * @param {IdiomaUpsertArgs} args - Arguments to update or create a Idioma.
     * @example
     * // Update or create a Idioma
     * const idioma = await prisma.idioma.upsert({
     *   create: {
     *     // ... data to create a Idioma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Idioma we want to update
     *   }
     * })
    **/
    upsert<T extends IdiomaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, IdiomaUpsertArgs<ExtArgs>>
    ): Prisma__IdiomaClient<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Idiomas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdiomaCountArgs} args - Arguments to filter Idiomas to count.
     * @example
     * // Count the number of Idiomas
     * const count = await prisma.idioma.count({
     *   where: {
     *     // ... the filter for the Idiomas we want to count
     *   }
     * })
    **/
    count<T extends IdiomaCountArgs>(
      args?: Subset<T, IdiomaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IdiomaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Idioma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdiomaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IdiomaAggregateArgs>(args: Subset<T, IdiomaAggregateArgs>): Prisma.PrismaPromise<GetIdiomaAggregateType<T>>

    /**
     * Group by Idioma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdiomaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IdiomaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IdiomaGroupByArgs['orderBy'] }
        : { orderBy?: IdiomaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IdiomaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIdiomaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Idioma model
   */
  readonly fields: IdiomaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Idioma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IdiomaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    registros<T extends Idioma$registrosArgs<ExtArgs> = {}>(args?: Subset<T, Idioma$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Idioma model
   */ 
  interface IdiomaFieldRefs {
    readonly id: FieldRef<"Idioma", 'Int'>
    readonly descripcion: FieldRef<"Idioma", 'String'>
    readonly estado: FieldRef<"Idioma", 'Estado'>
  }
    

  // Custom InputTypes
  /**
   * Idioma findUnique
   */
  export type IdiomaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * Filter, which Idioma to fetch.
     */
    where: IdiomaWhereUniqueInput
  }

  /**
   * Idioma findUniqueOrThrow
   */
  export type IdiomaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * Filter, which Idioma to fetch.
     */
    where: IdiomaWhereUniqueInput
  }

  /**
   * Idioma findFirst
   */
  export type IdiomaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * Filter, which Idioma to fetch.
     */
    where?: IdiomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Idiomas to fetch.
     */
    orderBy?: IdiomaOrderByWithRelationInput | IdiomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Idiomas.
     */
    cursor?: IdiomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Idiomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Idiomas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Idiomas.
     */
    distinct?: IdiomaScalarFieldEnum | IdiomaScalarFieldEnum[]
  }

  /**
   * Idioma findFirstOrThrow
   */
  export type IdiomaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * Filter, which Idioma to fetch.
     */
    where?: IdiomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Idiomas to fetch.
     */
    orderBy?: IdiomaOrderByWithRelationInput | IdiomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Idiomas.
     */
    cursor?: IdiomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Idiomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Idiomas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Idiomas.
     */
    distinct?: IdiomaScalarFieldEnum | IdiomaScalarFieldEnum[]
  }

  /**
   * Idioma findMany
   */
  export type IdiomaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * Filter, which Idiomas to fetch.
     */
    where?: IdiomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Idiomas to fetch.
     */
    orderBy?: IdiomaOrderByWithRelationInput | IdiomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Idiomas.
     */
    cursor?: IdiomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Idiomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Idiomas.
     */
    skip?: number
    distinct?: IdiomaScalarFieldEnum | IdiomaScalarFieldEnum[]
  }

  /**
   * Idioma create
   */
  export type IdiomaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * The data needed to create a Idioma.
     */
    data: XOR<IdiomaCreateInput, IdiomaUncheckedCreateInput>
  }

  /**
   * Idioma createMany
   */
  export type IdiomaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Idiomas.
     */
    data: IdiomaCreateManyInput | IdiomaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Idioma createManyAndReturn
   */
  export type IdiomaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * The data used to create many Idiomas.
     */
    data: IdiomaCreateManyInput | IdiomaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Idioma update
   */
  export type IdiomaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * The data needed to update a Idioma.
     */
    data: XOR<IdiomaUpdateInput, IdiomaUncheckedUpdateInput>
    /**
     * Choose, which Idioma to update.
     */
    where: IdiomaWhereUniqueInput
  }

  /**
   * Idioma updateMany
   */
  export type IdiomaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Idiomas.
     */
    data: XOR<IdiomaUpdateManyMutationInput, IdiomaUncheckedUpdateManyInput>
    /**
     * Filter which Idiomas to update
     */
    where?: IdiomaWhereInput
  }

  /**
   * Idioma upsert
   */
  export type IdiomaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * The filter to search for the Idioma to update in case it exists.
     */
    where: IdiomaWhereUniqueInput
    /**
     * In case the Idioma found by the `where` argument doesn't exist, create a new Idioma with this data.
     */
    create: XOR<IdiomaCreateInput, IdiomaUncheckedCreateInput>
    /**
     * In case the Idioma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IdiomaUpdateInput, IdiomaUncheckedUpdateInput>
  }

  /**
   * Idioma delete
   */
  export type IdiomaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
    /**
     * Filter which Idioma to delete.
     */
    where: IdiomaWhereUniqueInput
  }

  /**
   * Idioma deleteMany
   */
  export type IdiomaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Idiomas to delete
     */
    where?: IdiomaWhereInput
  }

  /**
   * Idioma.registros
   */
  export type Idioma$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    cursor?: RegistroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Idioma without action
   */
  export type IdiomaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Idioma
     */
    select?: IdiomaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdiomaInclude<ExtArgs> | null
  }


  /**
   * Model Palabra
   */

  export type AggregatePalabra = {
    _count: PalabraCountAggregateOutputType | null
    _avg: PalabraAvgAggregateOutputType | null
    _sum: PalabraSumAggregateOutputType | null
    _min: PalabraMinAggregateOutputType | null
    _max: PalabraMaxAggregateOutputType | null
  }

  export type PalabraAvgAggregateOutputType = {
    id: number | null
  }

  export type PalabraSumAggregateOutputType = {
    id: number | null
  }

  export type PalabraMinAggregateOutputType = {
    id: number | null
    palabra: string | null
    deletreo: string | null
    estado: $Enums.Estado | null
  }

  export type PalabraMaxAggregateOutputType = {
    id: number | null
    palabra: string | null
    deletreo: string | null
    estado: $Enums.Estado | null
  }

  export type PalabraCountAggregateOutputType = {
    id: number
    palabra: number
    deletreo: number
    estado: number
    _all: number
  }


  export type PalabraAvgAggregateInputType = {
    id?: true
  }

  export type PalabraSumAggregateInputType = {
    id?: true
  }

  export type PalabraMinAggregateInputType = {
    id?: true
    palabra?: true
    deletreo?: true
    estado?: true
  }

  export type PalabraMaxAggregateInputType = {
    id?: true
    palabra?: true
    deletreo?: true
    estado?: true
  }

  export type PalabraCountAggregateInputType = {
    id?: true
    palabra?: true
    deletreo?: true
    estado?: true
    _all?: true
  }

  export type PalabraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Palabra to aggregate.
     */
    where?: PalabraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Palabras to fetch.
     */
    orderBy?: PalabraOrderByWithRelationInput | PalabraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PalabraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Palabras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Palabras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Palabras
    **/
    _count?: true | PalabraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PalabraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PalabraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PalabraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PalabraMaxAggregateInputType
  }

  export type GetPalabraAggregateType<T extends PalabraAggregateArgs> = {
        [P in keyof T & keyof AggregatePalabra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePalabra[P]>
      : GetScalarType<T[P], AggregatePalabra[P]>
  }




  export type PalabraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PalabraWhereInput
    orderBy?: PalabraOrderByWithAggregationInput | PalabraOrderByWithAggregationInput[]
    by: PalabraScalarFieldEnum[] | PalabraScalarFieldEnum
    having?: PalabraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PalabraCountAggregateInputType | true
    _avg?: PalabraAvgAggregateInputType
    _sum?: PalabraSumAggregateInputType
    _min?: PalabraMinAggregateInputType
    _max?: PalabraMaxAggregateInputType
  }

  export type PalabraGroupByOutputType = {
    id: number
    palabra: string
    deletreo: string
    estado: $Enums.Estado
    _count: PalabraCountAggregateOutputType | null
    _avg: PalabraAvgAggregateOutputType | null
    _sum: PalabraSumAggregateOutputType | null
    _min: PalabraMinAggregateOutputType | null
    _max: PalabraMaxAggregateOutputType | null
  }

  type GetPalabraGroupByPayload<T extends PalabraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PalabraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PalabraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PalabraGroupByOutputType[P]>
            : GetScalarType<T[P], PalabraGroupByOutputType[P]>
        }
      >
    >


  export type PalabraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    palabra?: boolean
    deletreo?: boolean
    estado?: boolean
    registros?: boolean | Palabra$registrosArgs<ExtArgs>
    _count?: boolean | PalabraCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["palabra"]>

  export type PalabraSelectScalar = {
    id?: boolean
    palabra?: boolean
    deletreo?: boolean
    estado?: boolean
  }


  export type PalabraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | Palabra$registrosArgs<ExtArgs>
    _count?: boolean | PalabraCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PalabraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Palabra"
    objects: {
      registros: Prisma.$RegistroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      palabra: string
      deletreo: string
      estado: $Enums.Estado
    }, ExtArgs["result"]["palabra"]>
    composites: {}
  }


  type PalabraGetPayload<S extends boolean | null | undefined | PalabraDefaultArgs> = $Result.GetResult<Prisma.$PalabraPayload, S>

  type PalabraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PalabraFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PalabraCountAggregateInputType | true
    }

  export interface PalabraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Palabra'], meta: { name: 'Palabra' } }
    /**
     * Find zero or one Palabra that matches the filter.
     * @param {PalabraFindUniqueArgs} args - Arguments to find a Palabra
     * @example
     * // Get one Palabra
     * const palabra = await prisma.palabra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PalabraFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PalabraFindUniqueArgs<ExtArgs>>
    ): Prisma__PalabraClient<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Palabra that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PalabraFindUniqueOrThrowArgs} args - Arguments to find a Palabra
     * @example
     * // Get one Palabra
     * const palabra = await prisma.palabra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PalabraFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PalabraFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PalabraClient<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Palabra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalabraFindFirstArgs} args - Arguments to find a Palabra
     * @example
     * // Get one Palabra
     * const palabra = await prisma.palabra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PalabraFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PalabraFindFirstArgs<ExtArgs>>
    ): Prisma__PalabraClient<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Palabra that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalabraFindFirstOrThrowArgs} args - Arguments to find a Palabra
     * @example
     * // Get one Palabra
     * const palabra = await prisma.palabra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PalabraFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PalabraFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PalabraClient<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Palabras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalabraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Palabras
     * const palabras = await prisma.palabra.findMany()
     * 
     * // Get first 10 Palabras
     * const palabras = await prisma.palabra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const palabraWithIdOnly = await prisma.palabra.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PalabraFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PalabraFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Palabra.
     * @param {PalabraCreateArgs} args - Arguments to create a Palabra.
     * @example
     * // Create one Palabra
     * const Palabra = await prisma.palabra.create({
     *   data: {
     *     // ... data to create a Palabra
     *   }
     * })
     * 
    **/
    create<T extends PalabraCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PalabraCreateArgs<ExtArgs>>
    ): Prisma__PalabraClient<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Palabras.
     * @param {PalabraCreateManyArgs} args - Arguments to create many Palabras.
     * @example
     * // Create many Palabras
     * const palabra = await prisma.palabra.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PalabraCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PalabraCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Palabras and returns the data saved in the database.
     * @param {PalabraCreateManyAndReturnArgs} args - Arguments to create many Palabras.
     * @example
     * // Create many Palabras
     * const palabra = await prisma.palabra.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Palabras and only return the `id`
     * const palabraWithIdOnly = await prisma.palabra.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PalabraCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PalabraCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Palabra.
     * @param {PalabraDeleteArgs} args - Arguments to delete one Palabra.
     * @example
     * // Delete one Palabra
     * const Palabra = await prisma.palabra.delete({
     *   where: {
     *     // ... filter to delete one Palabra
     *   }
     * })
     * 
    **/
    delete<T extends PalabraDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PalabraDeleteArgs<ExtArgs>>
    ): Prisma__PalabraClient<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Palabra.
     * @param {PalabraUpdateArgs} args - Arguments to update one Palabra.
     * @example
     * // Update one Palabra
     * const palabra = await prisma.palabra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PalabraUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PalabraUpdateArgs<ExtArgs>>
    ): Prisma__PalabraClient<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Palabras.
     * @param {PalabraDeleteManyArgs} args - Arguments to filter Palabras to delete.
     * @example
     * // Delete a few Palabras
     * const { count } = await prisma.palabra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PalabraDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PalabraDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Palabras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalabraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Palabras
     * const palabra = await prisma.palabra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PalabraUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PalabraUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Palabra.
     * @param {PalabraUpsertArgs} args - Arguments to update or create a Palabra.
     * @example
     * // Update or create a Palabra
     * const palabra = await prisma.palabra.upsert({
     *   create: {
     *     // ... data to create a Palabra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Palabra we want to update
     *   }
     * })
    **/
    upsert<T extends PalabraUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PalabraUpsertArgs<ExtArgs>>
    ): Prisma__PalabraClient<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Palabras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalabraCountArgs} args - Arguments to filter Palabras to count.
     * @example
     * // Count the number of Palabras
     * const count = await prisma.palabra.count({
     *   where: {
     *     // ... the filter for the Palabras we want to count
     *   }
     * })
    **/
    count<T extends PalabraCountArgs>(
      args?: Subset<T, PalabraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PalabraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Palabra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalabraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PalabraAggregateArgs>(args: Subset<T, PalabraAggregateArgs>): Prisma.PrismaPromise<GetPalabraAggregateType<T>>

    /**
     * Group by Palabra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalabraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PalabraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PalabraGroupByArgs['orderBy'] }
        : { orderBy?: PalabraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PalabraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPalabraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Palabra model
   */
  readonly fields: PalabraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Palabra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PalabraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    registros<T extends Palabra$registrosArgs<ExtArgs> = {}>(args?: Subset<T, Palabra$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Palabra model
   */ 
  interface PalabraFieldRefs {
    readonly id: FieldRef<"Palabra", 'Int'>
    readonly palabra: FieldRef<"Palabra", 'String'>
    readonly deletreo: FieldRef<"Palabra", 'String'>
    readonly estado: FieldRef<"Palabra", 'Estado'>
  }
    

  // Custom InputTypes
  /**
   * Palabra findUnique
   */
  export type PalabraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * Filter, which Palabra to fetch.
     */
    where: PalabraWhereUniqueInput
  }

  /**
   * Palabra findUniqueOrThrow
   */
  export type PalabraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * Filter, which Palabra to fetch.
     */
    where: PalabraWhereUniqueInput
  }

  /**
   * Palabra findFirst
   */
  export type PalabraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * Filter, which Palabra to fetch.
     */
    where?: PalabraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Palabras to fetch.
     */
    orderBy?: PalabraOrderByWithRelationInput | PalabraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Palabras.
     */
    cursor?: PalabraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Palabras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Palabras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Palabras.
     */
    distinct?: PalabraScalarFieldEnum | PalabraScalarFieldEnum[]
  }

  /**
   * Palabra findFirstOrThrow
   */
  export type PalabraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * Filter, which Palabra to fetch.
     */
    where?: PalabraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Palabras to fetch.
     */
    orderBy?: PalabraOrderByWithRelationInput | PalabraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Palabras.
     */
    cursor?: PalabraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Palabras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Palabras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Palabras.
     */
    distinct?: PalabraScalarFieldEnum | PalabraScalarFieldEnum[]
  }

  /**
   * Palabra findMany
   */
  export type PalabraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * Filter, which Palabras to fetch.
     */
    where?: PalabraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Palabras to fetch.
     */
    orderBy?: PalabraOrderByWithRelationInput | PalabraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Palabras.
     */
    cursor?: PalabraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Palabras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Palabras.
     */
    skip?: number
    distinct?: PalabraScalarFieldEnum | PalabraScalarFieldEnum[]
  }

  /**
   * Palabra create
   */
  export type PalabraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * The data needed to create a Palabra.
     */
    data: XOR<PalabraCreateInput, PalabraUncheckedCreateInput>
  }

  /**
   * Palabra createMany
   */
  export type PalabraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Palabras.
     */
    data: PalabraCreateManyInput | PalabraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Palabra createManyAndReturn
   */
  export type PalabraCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * The data used to create many Palabras.
     */
    data: PalabraCreateManyInput | PalabraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Palabra update
   */
  export type PalabraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * The data needed to update a Palabra.
     */
    data: XOR<PalabraUpdateInput, PalabraUncheckedUpdateInput>
    /**
     * Choose, which Palabra to update.
     */
    where: PalabraWhereUniqueInput
  }

  /**
   * Palabra updateMany
   */
  export type PalabraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Palabras.
     */
    data: XOR<PalabraUpdateManyMutationInput, PalabraUncheckedUpdateManyInput>
    /**
     * Filter which Palabras to update
     */
    where?: PalabraWhereInput
  }

  /**
   * Palabra upsert
   */
  export type PalabraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * The filter to search for the Palabra to update in case it exists.
     */
    where: PalabraWhereUniqueInput
    /**
     * In case the Palabra found by the `where` argument doesn't exist, create a new Palabra with this data.
     */
    create: XOR<PalabraCreateInput, PalabraUncheckedCreateInput>
    /**
     * In case the Palabra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PalabraUpdateInput, PalabraUncheckedUpdateInput>
  }

  /**
   * Palabra delete
   */
  export type PalabraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
    /**
     * Filter which Palabra to delete.
     */
    where: PalabraWhereUniqueInput
  }

  /**
   * Palabra deleteMany
   */
  export type PalabraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Palabras to delete
     */
    where?: PalabraWhereInput
  }

  /**
   * Palabra.registros
   */
  export type Palabra$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    cursor?: RegistroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Palabra without action
   */
  export type PalabraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Palabra
     */
    select?: PalabraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalabraInclude<ExtArgs> | null
  }


  /**
   * Model Registro
   */

  export type AggregateRegistro = {
    _count: RegistroCountAggregateOutputType | null
    _avg: RegistroAvgAggregateOutputType | null
    _sum: RegistroSumAggregateOutputType | null
    _min: RegistroMinAggregateOutputType | null
    _max: RegistroMaxAggregateOutputType | null
  }

  export type RegistroAvgAggregateOutputType = {
    id: number | null
    idIdioma: number | null
    idPalabra: number | null
  }

  export type RegistroSumAggregateOutputType = {
    id: number | null
    idIdioma: number | null
    idPalabra: number | null
  }

  export type RegistroMinAggregateOutputType = {
    id: number | null
    fecha: Date | null
    hora: Date | null
    ubicacion: string | null
    idIdioma: number | null
    idPalabra: number | null
    deletreo: string | null
    silabas: string | null
    fonetica: string | null
    estado: $Enums.Estado | null
  }

  export type RegistroMaxAggregateOutputType = {
    id: number | null
    fecha: Date | null
    hora: Date | null
    ubicacion: string | null
    idIdioma: number | null
    idPalabra: number | null
    deletreo: string | null
    silabas: string | null
    fonetica: string | null
    estado: $Enums.Estado | null
  }

  export type RegistroCountAggregateOutputType = {
    id: number
    fecha: number
    hora: number
    ubicacion: number
    idIdioma: number
    idPalabra: number
    deletreo: number
    silabas: number
    fonetica: number
    estado: number
    _all: number
  }


  export type RegistroAvgAggregateInputType = {
    id?: true
    idIdioma?: true
    idPalabra?: true
  }

  export type RegistroSumAggregateInputType = {
    id?: true
    idIdioma?: true
    idPalabra?: true
  }

  export type RegistroMinAggregateInputType = {
    id?: true
    fecha?: true
    hora?: true
    ubicacion?: true
    idIdioma?: true
    idPalabra?: true
    deletreo?: true
    silabas?: true
    fonetica?: true
    estado?: true
  }

  export type RegistroMaxAggregateInputType = {
    id?: true
    fecha?: true
    hora?: true
    ubicacion?: true
    idIdioma?: true
    idPalabra?: true
    deletreo?: true
    silabas?: true
    fonetica?: true
    estado?: true
  }

  export type RegistroCountAggregateInputType = {
    id?: true
    fecha?: true
    hora?: true
    ubicacion?: true
    idIdioma?: true
    idPalabra?: true
    deletreo?: true
    silabas?: true
    fonetica?: true
    estado?: true
    _all?: true
  }

  export type RegistroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registro to aggregate.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Registros
    **/
    _count?: true | RegistroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistroMaxAggregateInputType
  }

  export type GetRegistroAggregateType<T extends RegistroAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistro[P]>
      : GetScalarType<T[P], AggregateRegistro[P]>
  }




  export type RegistroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithAggregationInput | RegistroOrderByWithAggregationInput[]
    by: RegistroScalarFieldEnum[] | RegistroScalarFieldEnum
    having?: RegistroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistroCountAggregateInputType | true
    _avg?: RegistroAvgAggregateInputType
    _sum?: RegistroSumAggregateInputType
    _min?: RegistroMinAggregateInputType
    _max?: RegistroMaxAggregateInputType
  }

  export type RegistroGroupByOutputType = {
    id: number
    fecha: Date
    hora: Date
    ubicacion: string
    idIdioma: number
    idPalabra: number
    deletreo: string | null
    silabas: string | null
    fonetica: string | null
    estado: $Enums.Estado
    _count: RegistroCountAggregateOutputType | null
    _avg: RegistroAvgAggregateOutputType | null
    _sum: RegistroSumAggregateOutputType | null
    _min: RegistroMinAggregateOutputType | null
    _max: RegistroMaxAggregateOutputType | null
  }

  type GetRegistroGroupByPayload<T extends RegistroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistroGroupByOutputType[P]>
            : GetScalarType<T[P], RegistroGroupByOutputType[P]>
        }
      >
    >


  export type RegistroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    hora?: boolean
    ubicacion?: boolean
    idIdioma?: boolean
    idPalabra?: boolean
    deletreo?: boolean
    silabas?: boolean
    fonetica?: boolean
    estado?: boolean
    idioma?: boolean | IdiomaDefaultArgs<ExtArgs>
    palabra?: boolean | PalabraDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registro"]>

  export type RegistroSelectScalar = {
    id?: boolean
    fecha?: boolean
    hora?: boolean
    ubicacion?: boolean
    idIdioma?: boolean
    idPalabra?: boolean
    deletreo?: boolean
    silabas?: boolean
    fonetica?: boolean
    estado?: boolean
  }


  export type RegistroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    idioma?: boolean | IdiomaDefaultArgs<ExtArgs>
    palabra?: boolean | PalabraDefaultArgs<ExtArgs>
  }


  export type $RegistroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Registro"
    objects: {
      idioma: Prisma.$IdiomaPayload<ExtArgs>
      palabra: Prisma.$PalabraPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fecha: Date
      hora: Date
      ubicacion: string
      idIdioma: number
      idPalabra: number
      deletreo: string | null
      silabas: string | null
      fonetica: string | null
      estado: $Enums.Estado
    }, ExtArgs["result"]["registro"]>
    composites: {}
  }


  type RegistroGetPayload<S extends boolean | null | undefined | RegistroDefaultArgs> = $Result.GetResult<Prisma.$RegistroPayload, S>

  type RegistroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegistroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegistroCountAggregateInputType | true
    }

  export interface RegistroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Registro'], meta: { name: 'Registro' } }
    /**
     * Find zero or one Registro that matches the filter.
     * @param {RegistroFindUniqueArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RegistroFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RegistroFindUniqueArgs<ExtArgs>>
    ): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Registro that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RegistroFindUniqueOrThrowArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RegistroFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistroFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Registro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroFindFirstArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RegistroFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistroFindFirstArgs<ExtArgs>>
    ): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Registro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroFindFirstOrThrowArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RegistroFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistroFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Registros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registros
     * const registros = await prisma.registro.findMany()
     * 
     * // Get first 10 Registros
     * const registros = await prisma.registro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registroWithIdOnly = await prisma.registro.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RegistroFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistroFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Registro.
     * @param {RegistroCreateArgs} args - Arguments to create a Registro.
     * @example
     * // Create one Registro
     * const Registro = await prisma.registro.create({
     *   data: {
     *     // ... data to create a Registro
     *   }
     * })
     * 
    **/
    create<T extends RegistroCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RegistroCreateArgs<ExtArgs>>
    ): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Registros.
     * @param {RegistroCreateManyArgs} args - Arguments to create many Registros.
     * @example
     * // Create many Registros
     * const registro = await prisma.registro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RegistroCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistroCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Registros and returns the data saved in the database.
     * @param {RegistroCreateManyAndReturnArgs} args - Arguments to create many Registros.
     * @example
     * // Create many Registros
     * const registro = await prisma.registro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Registros and only return the `id`
     * const registroWithIdOnly = await prisma.registro.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends RegistroCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistroCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Registro.
     * @param {RegistroDeleteArgs} args - Arguments to delete one Registro.
     * @example
     * // Delete one Registro
     * const Registro = await prisma.registro.delete({
     *   where: {
     *     // ... filter to delete one Registro
     *   }
     * })
     * 
    **/
    delete<T extends RegistroDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RegistroDeleteArgs<ExtArgs>>
    ): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Registro.
     * @param {RegistroUpdateArgs} args - Arguments to update one Registro.
     * @example
     * // Update one Registro
     * const registro = await prisma.registro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RegistroUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RegistroUpdateArgs<ExtArgs>>
    ): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Registros.
     * @param {RegistroDeleteManyArgs} args - Arguments to filter Registros to delete.
     * @example
     * // Delete a few Registros
     * const { count } = await prisma.registro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RegistroDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistroDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registros
     * const registro = await prisma.registro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RegistroUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RegistroUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Registro.
     * @param {RegistroUpsertArgs} args - Arguments to update or create a Registro.
     * @example
     * // Update or create a Registro
     * const registro = await prisma.registro.upsert({
     *   create: {
     *     // ... data to create a Registro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registro we want to update
     *   }
     * })
    **/
    upsert<T extends RegistroUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RegistroUpsertArgs<ExtArgs>>
    ): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Registros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCountArgs} args - Arguments to filter Registros to count.
     * @example
     * // Count the number of Registros
     * const count = await prisma.registro.count({
     *   where: {
     *     // ... the filter for the Registros we want to count
     *   }
     * })
    **/
    count<T extends RegistroCountArgs>(
      args?: Subset<T, RegistroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistroAggregateArgs>(args: Subset<T, RegistroAggregateArgs>): Prisma.PrismaPromise<GetRegistroAggregateType<T>>

    /**
     * Group by Registro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegistroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegistroGroupByArgs['orderBy'] }
        : { orderBy?: RegistroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegistroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Registro model
   */
  readonly fields: RegistroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Registro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegistroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    idioma<T extends IdiomaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IdiomaDefaultArgs<ExtArgs>>): Prisma__IdiomaClient<$Result.GetResult<Prisma.$IdiomaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    palabra<T extends PalabraDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PalabraDefaultArgs<ExtArgs>>): Prisma__PalabraClient<$Result.GetResult<Prisma.$PalabraPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Registro model
   */ 
  interface RegistroFieldRefs {
    readonly id: FieldRef<"Registro", 'Int'>
    readonly fecha: FieldRef<"Registro", 'DateTime'>
    readonly hora: FieldRef<"Registro", 'DateTime'>
    readonly ubicacion: FieldRef<"Registro", 'String'>
    readonly idIdioma: FieldRef<"Registro", 'Int'>
    readonly idPalabra: FieldRef<"Registro", 'Int'>
    readonly deletreo: FieldRef<"Registro", 'String'>
    readonly silabas: FieldRef<"Registro", 'String'>
    readonly fonetica: FieldRef<"Registro", 'String'>
    readonly estado: FieldRef<"Registro", 'Estado'>
  }
    

  // Custom InputTypes
  /**
   * Registro findUnique
   */
  export type RegistroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro findUniqueOrThrow
   */
  export type RegistroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro findFirst
   */
  export type RegistroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registros.
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registros.
     */
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Registro findFirstOrThrow
   */
  export type RegistroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registros.
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registros.
     */
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Registro findMany
   */
  export type RegistroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registros to fetch.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Registros.
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Registro create
   */
  export type RegistroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The data needed to create a Registro.
     */
    data: XOR<RegistroCreateInput, RegistroUncheckedCreateInput>
  }

  /**
   * Registro createMany
   */
  export type RegistroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Registros.
     */
    data: RegistroCreateManyInput | RegistroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Registro createManyAndReturn
   */
  export type RegistroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The data used to create many Registros.
     */
    data: RegistroCreateManyInput | RegistroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Registro update
   */
  export type RegistroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The data needed to update a Registro.
     */
    data: XOR<RegistroUpdateInput, RegistroUncheckedUpdateInput>
    /**
     * Choose, which Registro to update.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro updateMany
   */
  export type RegistroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Registros.
     */
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyInput>
    /**
     * Filter which Registros to update
     */
    where?: RegistroWhereInput
  }

  /**
   * Registro upsert
   */
  export type RegistroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The filter to search for the Registro to update in case it exists.
     */
    where: RegistroWhereUniqueInput
    /**
     * In case the Registro found by the `where` argument doesn't exist, create a new Registro with this data.
     */
    create: XOR<RegistroCreateInput, RegistroUncheckedCreateInput>
    /**
     * In case the Registro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegistroUpdateInput, RegistroUncheckedUpdateInput>
  }

  /**
   * Registro delete
   */
  export type RegistroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter which Registro to delete.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro deleteMany
   */
  export type RegistroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registros to delete
     */
    where?: RegistroWhereInput
  }

  /**
   * Registro without action
   */
  export type RegistroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const IdiomaScalarFieldEnum: {
    id: 'id',
    descripcion: 'descripcion',
    estado: 'estado'
  };

  export type IdiomaScalarFieldEnum = (typeof IdiomaScalarFieldEnum)[keyof typeof IdiomaScalarFieldEnum]


  export const PalabraScalarFieldEnum: {
    id: 'id',
    palabra: 'palabra',
    deletreo: 'deletreo',
    estado: 'estado'
  };

  export type PalabraScalarFieldEnum = (typeof PalabraScalarFieldEnum)[keyof typeof PalabraScalarFieldEnum]


  export const RegistroScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    hora: 'hora',
    ubicacion: 'ubicacion',
    idIdioma: 'idIdioma',
    idPalabra: 'idPalabra',
    deletreo: 'deletreo',
    silabas: 'silabas',
    fonetica: 'fonetica',
    estado: 'estado'
  };

  export type RegistroScalarFieldEnum = (typeof RegistroScalarFieldEnum)[keyof typeof RegistroScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Estado'
   */
  export type EnumEstadoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Estado'>
    


  /**
   * Reference to a field of type 'Estado[]'
   */
  export type ListEnumEstadoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Estado[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type IdiomaWhereInput = {
    AND?: IdiomaWhereInput | IdiomaWhereInput[]
    OR?: IdiomaWhereInput[]
    NOT?: IdiomaWhereInput | IdiomaWhereInput[]
    id?: IntFilter<"Idioma"> | number
    descripcion?: StringFilter<"Idioma"> | string
    estado?: EnumEstadoFilter<"Idioma"> | $Enums.Estado
    registros?: RegistroListRelationFilter
  }

  export type IdiomaOrderByWithRelationInput = {
    id?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    registros?: RegistroOrderByRelationAggregateInput
  }

  export type IdiomaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IdiomaWhereInput | IdiomaWhereInput[]
    OR?: IdiomaWhereInput[]
    NOT?: IdiomaWhereInput | IdiomaWhereInput[]
    descripcion?: StringFilter<"Idioma"> | string
    estado?: EnumEstadoFilter<"Idioma"> | $Enums.Estado
    registros?: RegistroListRelationFilter
  }, "id">

  export type IdiomaOrderByWithAggregationInput = {
    id?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    _count?: IdiomaCountOrderByAggregateInput
    _avg?: IdiomaAvgOrderByAggregateInput
    _max?: IdiomaMaxOrderByAggregateInput
    _min?: IdiomaMinOrderByAggregateInput
    _sum?: IdiomaSumOrderByAggregateInput
  }

  export type IdiomaScalarWhereWithAggregatesInput = {
    AND?: IdiomaScalarWhereWithAggregatesInput | IdiomaScalarWhereWithAggregatesInput[]
    OR?: IdiomaScalarWhereWithAggregatesInput[]
    NOT?: IdiomaScalarWhereWithAggregatesInput | IdiomaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Idioma"> | number
    descripcion?: StringWithAggregatesFilter<"Idioma"> | string
    estado?: EnumEstadoWithAggregatesFilter<"Idioma"> | $Enums.Estado
  }

  export type PalabraWhereInput = {
    AND?: PalabraWhereInput | PalabraWhereInput[]
    OR?: PalabraWhereInput[]
    NOT?: PalabraWhereInput | PalabraWhereInput[]
    id?: IntFilter<"Palabra"> | number
    palabra?: StringFilter<"Palabra"> | string
    deletreo?: StringFilter<"Palabra"> | string
    estado?: EnumEstadoFilter<"Palabra"> | $Enums.Estado
    registros?: RegistroListRelationFilter
  }

  export type PalabraOrderByWithRelationInput = {
    id?: SortOrder
    palabra?: SortOrder
    deletreo?: SortOrder
    estado?: SortOrder
    registros?: RegistroOrderByRelationAggregateInput
  }

  export type PalabraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PalabraWhereInput | PalabraWhereInput[]
    OR?: PalabraWhereInput[]
    NOT?: PalabraWhereInput | PalabraWhereInput[]
    palabra?: StringFilter<"Palabra"> | string
    deletreo?: StringFilter<"Palabra"> | string
    estado?: EnumEstadoFilter<"Palabra"> | $Enums.Estado
    registros?: RegistroListRelationFilter
  }, "id">

  export type PalabraOrderByWithAggregationInput = {
    id?: SortOrder
    palabra?: SortOrder
    deletreo?: SortOrder
    estado?: SortOrder
    _count?: PalabraCountOrderByAggregateInput
    _avg?: PalabraAvgOrderByAggregateInput
    _max?: PalabraMaxOrderByAggregateInput
    _min?: PalabraMinOrderByAggregateInput
    _sum?: PalabraSumOrderByAggregateInput
  }

  export type PalabraScalarWhereWithAggregatesInput = {
    AND?: PalabraScalarWhereWithAggregatesInput | PalabraScalarWhereWithAggregatesInput[]
    OR?: PalabraScalarWhereWithAggregatesInput[]
    NOT?: PalabraScalarWhereWithAggregatesInput | PalabraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Palabra"> | number
    palabra?: StringWithAggregatesFilter<"Palabra"> | string
    deletreo?: StringWithAggregatesFilter<"Palabra"> | string
    estado?: EnumEstadoWithAggregatesFilter<"Palabra"> | $Enums.Estado
  }

  export type RegistroWhereInput = {
    AND?: RegistroWhereInput | RegistroWhereInput[]
    OR?: RegistroWhereInput[]
    NOT?: RegistroWhereInput | RegistroWhereInput[]
    id?: IntFilter<"Registro"> | number
    fecha?: DateTimeFilter<"Registro"> | Date | string
    hora?: DateTimeFilter<"Registro"> | Date | string
    ubicacion?: StringFilter<"Registro"> | string
    idIdioma?: IntFilter<"Registro"> | number
    idPalabra?: IntFilter<"Registro"> | number
    deletreo?: StringNullableFilter<"Registro"> | string | null
    silabas?: StringNullableFilter<"Registro"> | string | null
    fonetica?: StringNullableFilter<"Registro"> | string | null
    estado?: EnumEstadoFilter<"Registro"> | $Enums.Estado
    idioma?: XOR<IdiomaRelationFilter, IdiomaWhereInput>
    palabra?: XOR<PalabraRelationFilter, PalabraWhereInput>
  }

  export type RegistroOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    idIdioma?: SortOrder
    idPalabra?: SortOrder
    deletreo?: SortOrderInput | SortOrder
    silabas?: SortOrderInput | SortOrder
    fonetica?: SortOrderInput | SortOrder
    estado?: SortOrder
    idioma?: IdiomaOrderByWithRelationInput
    palabra?: PalabraOrderByWithRelationInput
  }

  export type RegistroWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RegistroWhereInput | RegistroWhereInput[]
    OR?: RegistroWhereInput[]
    NOT?: RegistroWhereInput | RegistroWhereInput[]
    fecha?: DateTimeFilter<"Registro"> | Date | string
    hora?: DateTimeFilter<"Registro"> | Date | string
    ubicacion?: StringFilter<"Registro"> | string
    idIdioma?: IntFilter<"Registro"> | number
    idPalabra?: IntFilter<"Registro"> | number
    deletreo?: StringNullableFilter<"Registro"> | string | null
    silabas?: StringNullableFilter<"Registro"> | string | null
    fonetica?: StringNullableFilter<"Registro"> | string | null
    estado?: EnumEstadoFilter<"Registro"> | $Enums.Estado
    idioma?: XOR<IdiomaRelationFilter, IdiomaWhereInput>
    palabra?: XOR<PalabraRelationFilter, PalabraWhereInput>
  }, "id">

  export type RegistroOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    idIdioma?: SortOrder
    idPalabra?: SortOrder
    deletreo?: SortOrderInput | SortOrder
    silabas?: SortOrderInput | SortOrder
    fonetica?: SortOrderInput | SortOrder
    estado?: SortOrder
    _count?: RegistroCountOrderByAggregateInput
    _avg?: RegistroAvgOrderByAggregateInput
    _max?: RegistroMaxOrderByAggregateInput
    _min?: RegistroMinOrderByAggregateInput
    _sum?: RegistroSumOrderByAggregateInput
  }

  export type RegistroScalarWhereWithAggregatesInput = {
    AND?: RegistroScalarWhereWithAggregatesInput | RegistroScalarWhereWithAggregatesInput[]
    OR?: RegistroScalarWhereWithAggregatesInput[]
    NOT?: RegistroScalarWhereWithAggregatesInput | RegistroScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Registro"> | number
    fecha?: DateTimeWithAggregatesFilter<"Registro"> | Date | string
    hora?: DateTimeWithAggregatesFilter<"Registro"> | Date | string
    ubicacion?: StringWithAggregatesFilter<"Registro"> | string
    idIdioma?: IntWithAggregatesFilter<"Registro"> | number
    idPalabra?: IntWithAggregatesFilter<"Registro"> | number
    deletreo?: StringNullableWithAggregatesFilter<"Registro"> | string | null
    silabas?: StringNullableWithAggregatesFilter<"Registro"> | string | null
    fonetica?: StringNullableWithAggregatesFilter<"Registro"> | string | null
    estado?: EnumEstadoWithAggregatesFilter<"Registro"> | $Enums.Estado
  }

  export type IdiomaCreateInput = {
    descripcion: string
    estado?: $Enums.Estado
    registros?: RegistroCreateNestedManyWithoutIdiomaInput
  }

  export type IdiomaUncheckedCreateInput = {
    id?: number
    descripcion: string
    estado?: $Enums.Estado
    registros?: RegistroUncheckedCreateNestedManyWithoutIdiomaInput
  }

  export type IdiomaUpdateInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
    registros?: RegistroUpdateManyWithoutIdiomaNestedInput
  }

  export type IdiomaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
    registros?: RegistroUncheckedUpdateManyWithoutIdiomaNestedInput
  }

  export type IdiomaCreateManyInput = {
    id?: number
    descripcion: string
    estado?: $Enums.Estado
  }

  export type IdiomaUpdateManyMutationInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type IdiomaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type PalabraCreateInput = {
    palabra: string
    deletreo: string
    estado?: $Enums.Estado
    registros?: RegistroCreateNestedManyWithoutPalabraInput
  }

  export type PalabraUncheckedCreateInput = {
    id?: number
    palabra: string
    deletreo: string
    estado?: $Enums.Estado
    registros?: RegistroUncheckedCreateNestedManyWithoutPalabraInput
  }

  export type PalabraUpdateInput = {
    palabra?: StringFieldUpdateOperationsInput | string
    deletreo?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
    registros?: RegistroUpdateManyWithoutPalabraNestedInput
  }

  export type PalabraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    palabra?: StringFieldUpdateOperationsInput | string
    deletreo?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
    registros?: RegistroUncheckedUpdateManyWithoutPalabraNestedInput
  }

  export type PalabraCreateManyInput = {
    id?: number
    palabra: string
    deletreo: string
    estado?: $Enums.Estado
  }

  export type PalabraUpdateManyMutationInput = {
    palabra?: StringFieldUpdateOperationsInput | string
    deletreo?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type PalabraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    palabra?: StringFieldUpdateOperationsInput | string
    deletreo?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type RegistroCreateInput = {
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    deletreo?: string | null
    silabas?: string | null
    fonetica?: string | null
    estado?: $Enums.Estado
    idioma: IdiomaCreateNestedOneWithoutRegistrosInput
    palabra: PalabraCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    idIdioma: number
    idPalabra: number
    deletreo?: string | null
    silabas?: string | null
    fonetica?: string | null
    estado?: $Enums.Estado
  }

  export type RegistroUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
    idioma?: IdiomaUpdateOneRequiredWithoutRegistrosNestedInput
    palabra?: PalabraUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    idIdioma?: IntFieldUpdateOperationsInput | number
    idPalabra?: IntFieldUpdateOperationsInput | number
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type RegistroCreateManyInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    idIdioma: number
    idPalabra: number
    deletreo?: string | null
    silabas?: string | null
    fonetica?: string | null
    estado?: $Enums.Estado
  }

  export type RegistroUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type RegistroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    idIdioma?: IntFieldUpdateOperationsInput | number
    idPalabra?: IntFieldUpdateOperationsInput | number
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumEstadoFilter<$PrismaModel = never> = {
    equals?: $Enums.Estado | EnumEstadoFieldRefInput<$PrismaModel>
    in?: $Enums.Estado[] | ListEnumEstadoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Estado[] | ListEnumEstadoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFilter<$PrismaModel> | $Enums.Estado
  }

  export type RegistroListRelationFilter = {
    every?: RegistroWhereInput
    some?: RegistroWhereInput
    none?: RegistroWhereInput
  }

  export type RegistroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IdiomaCountOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
  }

  export type IdiomaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IdiomaMaxOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
  }

  export type IdiomaMinOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
  }

  export type IdiomaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumEstadoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Estado | EnumEstadoFieldRefInput<$PrismaModel>
    in?: $Enums.Estado[] | ListEnumEstadoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Estado[] | ListEnumEstadoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoWithAggregatesFilter<$PrismaModel> | $Enums.Estado
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoFilter<$PrismaModel>
    _max?: NestedEnumEstadoFilter<$PrismaModel>
  }

  export type PalabraCountOrderByAggregateInput = {
    id?: SortOrder
    palabra?: SortOrder
    deletreo?: SortOrder
    estado?: SortOrder
  }

  export type PalabraAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PalabraMaxOrderByAggregateInput = {
    id?: SortOrder
    palabra?: SortOrder
    deletreo?: SortOrder
    estado?: SortOrder
  }

  export type PalabraMinOrderByAggregateInput = {
    id?: SortOrder
    palabra?: SortOrder
    deletreo?: SortOrder
    estado?: SortOrder
  }

  export type PalabraSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IdiomaRelationFilter = {
    is?: IdiomaWhereInput
    isNot?: IdiomaWhereInput
  }

  export type PalabraRelationFilter = {
    is?: PalabraWhereInput
    isNot?: PalabraWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RegistroCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    idIdioma?: SortOrder
    idPalabra?: SortOrder
    deletreo?: SortOrder
    silabas?: SortOrder
    fonetica?: SortOrder
    estado?: SortOrder
  }

  export type RegistroAvgOrderByAggregateInput = {
    id?: SortOrder
    idIdioma?: SortOrder
    idPalabra?: SortOrder
  }

  export type RegistroMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    idIdioma?: SortOrder
    idPalabra?: SortOrder
    deletreo?: SortOrder
    silabas?: SortOrder
    fonetica?: SortOrder
    estado?: SortOrder
  }

  export type RegistroMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    idIdioma?: SortOrder
    idPalabra?: SortOrder
    deletreo?: SortOrder
    silabas?: SortOrder
    fonetica?: SortOrder
    estado?: SortOrder
  }

  export type RegistroSumOrderByAggregateInput = {
    id?: SortOrder
    idIdioma?: SortOrder
    idPalabra?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type RegistroCreateNestedManyWithoutIdiomaInput = {
    create?: XOR<RegistroCreateWithoutIdiomaInput, RegistroUncheckedCreateWithoutIdiomaInput> | RegistroCreateWithoutIdiomaInput[] | RegistroUncheckedCreateWithoutIdiomaInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutIdiomaInput | RegistroCreateOrConnectWithoutIdiomaInput[]
    createMany?: RegistroCreateManyIdiomaInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type RegistroUncheckedCreateNestedManyWithoutIdiomaInput = {
    create?: XOR<RegistroCreateWithoutIdiomaInput, RegistroUncheckedCreateWithoutIdiomaInput> | RegistroCreateWithoutIdiomaInput[] | RegistroUncheckedCreateWithoutIdiomaInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutIdiomaInput | RegistroCreateOrConnectWithoutIdiomaInput[]
    createMany?: RegistroCreateManyIdiomaInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumEstadoFieldUpdateOperationsInput = {
    set?: $Enums.Estado
  }

  export type RegistroUpdateManyWithoutIdiomaNestedInput = {
    create?: XOR<RegistroCreateWithoutIdiomaInput, RegistroUncheckedCreateWithoutIdiomaInput> | RegistroCreateWithoutIdiomaInput[] | RegistroUncheckedCreateWithoutIdiomaInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutIdiomaInput | RegistroCreateOrConnectWithoutIdiomaInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutIdiomaInput | RegistroUpsertWithWhereUniqueWithoutIdiomaInput[]
    createMany?: RegistroCreateManyIdiomaInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutIdiomaInput | RegistroUpdateWithWhereUniqueWithoutIdiomaInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutIdiomaInput | RegistroUpdateManyWithWhereWithoutIdiomaInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RegistroUncheckedUpdateManyWithoutIdiomaNestedInput = {
    create?: XOR<RegistroCreateWithoutIdiomaInput, RegistroUncheckedCreateWithoutIdiomaInput> | RegistroCreateWithoutIdiomaInput[] | RegistroUncheckedCreateWithoutIdiomaInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutIdiomaInput | RegistroCreateOrConnectWithoutIdiomaInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutIdiomaInput | RegistroUpsertWithWhereUniqueWithoutIdiomaInput[]
    createMany?: RegistroCreateManyIdiomaInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutIdiomaInput | RegistroUpdateWithWhereUniqueWithoutIdiomaInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutIdiomaInput | RegistroUpdateManyWithWhereWithoutIdiomaInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type RegistroCreateNestedManyWithoutPalabraInput = {
    create?: XOR<RegistroCreateWithoutPalabraInput, RegistroUncheckedCreateWithoutPalabraInput> | RegistroCreateWithoutPalabraInput[] | RegistroUncheckedCreateWithoutPalabraInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutPalabraInput | RegistroCreateOrConnectWithoutPalabraInput[]
    createMany?: RegistroCreateManyPalabraInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type RegistroUncheckedCreateNestedManyWithoutPalabraInput = {
    create?: XOR<RegistroCreateWithoutPalabraInput, RegistroUncheckedCreateWithoutPalabraInput> | RegistroCreateWithoutPalabraInput[] | RegistroUncheckedCreateWithoutPalabraInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutPalabraInput | RegistroCreateOrConnectWithoutPalabraInput[]
    createMany?: RegistroCreateManyPalabraInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type RegistroUpdateManyWithoutPalabraNestedInput = {
    create?: XOR<RegistroCreateWithoutPalabraInput, RegistroUncheckedCreateWithoutPalabraInput> | RegistroCreateWithoutPalabraInput[] | RegistroUncheckedCreateWithoutPalabraInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutPalabraInput | RegistroCreateOrConnectWithoutPalabraInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutPalabraInput | RegistroUpsertWithWhereUniqueWithoutPalabraInput[]
    createMany?: RegistroCreateManyPalabraInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutPalabraInput | RegistroUpdateWithWhereUniqueWithoutPalabraInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutPalabraInput | RegistroUpdateManyWithWhereWithoutPalabraInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type RegistroUncheckedUpdateManyWithoutPalabraNestedInput = {
    create?: XOR<RegistroCreateWithoutPalabraInput, RegistroUncheckedCreateWithoutPalabraInput> | RegistroCreateWithoutPalabraInput[] | RegistroUncheckedCreateWithoutPalabraInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutPalabraInput | RegistroCreateOrConnectWithoutPalabraInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutPalabraInput | RegistroUpsertWithWhereUniqueWithoutPalabraInput[]
    createMany?: RegistroCreateManyPalabraInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutPalabraInput | RegistroUpdateWithWhereUniqueWithoutPalabraInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutPalabraInput | RegistroUpdateManyWithWhereWithoutPalabraInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type IdiomaCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<IdiomaCreateWithoutRegistrosInput, IdiomaUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: IdiomaCreateOrConnectWithoutRegistrosInput
    connect?: IdiomaWhereUniqueInput
  }

  export type PalabraCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<PalabraCreateWithoutRegistrosInput, PalabraUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: PalabraCreateOrConnectWithoutRegistrosInput
    connect?: PalabraWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IdiomaUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<IdiomaCreateWithoutRegistrosInput, IdiomaUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: IdiomaCreateOrConnectWithoutRegistrosInput
    upsert?: IdiomaUpsertWithoutRegistrosInput
    connect?: IdiomaWhereUniqueInput
    update?: XOR<XOR<IdiomaUpdateToOneWithWhereWithoutRegistrosInput, IdiomaUpdateWithoutRegistrosInput>, IdiomaUncheckedUpdateWithoutRegistrosInput>
  }

  export type PalabraUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<PalabraCreateWithoutRegistrosInput, PalabraUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: PalabraCreateOrConnectWithoutRegistrosInput
    upsert?: PalabraUpsertWithoutRegistrosInput
    connect?: PalabraWhereUniqueInput
    update?: XOR<XOR<PalabraUpdateToOneWithWhereWithoutRegistrosInput, PalabraUpdateWithoutRegistrosInput>, PalabraUncheckedUpdateWithoutRegistrosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumEstadoFilter<$PrismaModel = never> = {
    equals?: $Enums.Estado | EnumEstadoFieldRefInput<$PrismaModel>
    in?: $Enums.Estado[] | ListEnumEstadoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Estado[] | ListEnumEstadoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFilter<$PrismaModel> | $Enums.Estado
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumEstadoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Estado | EnumEstadoFieldRefInput<$PrismaModel>
    in?: $Enums.Estado[] | ListEnumEstadoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Estado[] | ListEnumEstadoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoWithAggregatesFilter<$PrismaModel> | $Enums.Estado
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoFilter<$PrismaModel>
    _max?: NestedEnumEstadoFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type RegistroCreateWithoutIdiomaInput = {
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    deletreo?: string | null
    silabas?: string | null
    fonetica?: string | null
    estado?: $Enums.Estado
    palabra: PalabraCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateWithoutIdiomaInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    idPalabra: number
    deletreo?: string | null
    silabas?: string | null
    fonetica?: string | null
    estado?: $Enums.Estado
  }

  export type RegistroCreateOrConnectWithoutIdiomaInput = {
    where: RegistroWhereUniqueInput
    create: XOR<RegistroCreateWithoutIdiomaInput, RegistroUncheckedCreateWithoutIdiomaInput>
  }

  export type RegistroCreateManyIdiomaInputEnvelope = {
    data: RegistroCreateManyIdiomaInput | RegistroCreateManyIdiomaInput[]
    skipDuplicates?: boolean
  }

  export type RegistroUpsertWithWhereUniqueWithoutIdiomaInput = {
    where: RegistroWhereUniqueInput
    update: XOR<RegistroUpdateWithoutIdiomaInput, RegistroUncheckedUpdateWithoutIdiomaInput>
    create: XOR<RegistroCreateWithoutIdiomaInput, RegistroUncheckedCreateWithoutIdiomaInput>
  }

  export type RegistroUpdateWithWhereUniqueWithoutIdiomaInput = {
    where: RegistroWhereUniqueInput
    data: XOR<RegistroUpdateWithoutIdiomaInput, RegistroUncheckedUpdateWithoutIdiomaInput>
  }

  export type RegistroUpdateManyWithWhereWithoutIdiomaInput = {
    where: RegistroScalarWhereInput
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyWithoutIdiomaInput>
  }

  export type RegistroScalarWhereInput = {
    AND?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
    OR?: RegistroScalarWhereInput[]
    NOT?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
    id?: IntFilter<"Registro"> | number
    fecha?: DateTimeFilter<"Registro"> | Date | string
    hora?: DateTimeFilter<"Registro"> | Date | string
    ubicacion?: StringFilter<"Registro"> | string
    idIdioma?: IntFilter<"Registro"> | number
    idPalabra?: IntFilter<"Registro"> | number
    deletreo?: StringNullableFilter<"Registro"> | string | null
    silabas?: StringNullableFilter<"Registro"> | string | null
    fonetica?: StringNullableFilter<"Registro"> | string | null
    estado?: EnumEstadoFilter<"Registro"> | $Enums.Estado
  }

  export type RegistroCreateWithoutPalabraInput = {
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    deletreo?: string | null
    silabas?: string | null
    fonetica?: string | null
    estado?: $Enums.Estado
    idioma: IdiomaCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateWithoutPalabraInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    idIdioma: number
    deletreo?: string | null
    silabas?: string | null
    fonetica?: string | null
    estado?: $Enums.Estado
  }

  export type RegistroCreateOrConnectWithoutPalabraInput = {
    where: RegistroWhereUniqueInput
    create: XOR<RegistroCreateWithoutPalabraInput, RegistroUncheckedCreateWithoutPalabraInput>
  }

  export type RegistroCreateManyPalabraInputEnvelope = {
    data: RegistroCreateManyPalabraInput | RegistroCreateManyPalabraInput[]
    skipDuplicates?: boolean
  }

  export type RegistroUpsertWithWhereUniqueWithoutPalabraInput = {
    where: RegistroWhereUniqueInput
    update: XOR<RegistroUpdateWithoutPalabraInput, RegistroUncheckedUpdateWithoutPalabraInput>
    create: XOR<RegistroCreateWithoutPalabraInput, RegistroUncheckedCreateWithoutPalabraInput>
  }

  export type RegistroUpdateWithWhereUniqueWithoutPalabraInput = {
    where: RegistroWhereUniqueInput
    data: XOR<RegistroUpdateWithoutPalabraInput, RegistroUncheckedUpdateWithoutPalabraInput>
  }

  export type RegistroUpdateManyWithWhereWithoutPalabraInput = {
    where: RegistroScalarWhereInput
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyWithoutPalabraInput>
  }

  export type IdiomaCreateWithoutRegistrosInput = {
    descripcion: string
    estado?: $Enums.Estado
  }

  export type IdiomaUncheckedCreateWithoutRegistrosInput = {
    id?: number
    descripcion: string
    estado?: $Enums.Estado
  }

  export type IdiomaCreateOrConnectWithoutRegistrosInput = {
    where: IdiomaWhereUniqueInput
    create: XOR<IdiomaCreateWithoutRegistrosInput, IdiomaUncheckedCreateWithoutRegistrosInput>
  }

  export type PalabraCreateWithoutRegistrosInput = {
    palabra: string
    deletreo: string
    estado?: $Enums.Estado
  }

  export type PalabraUncheckedCreateWithoutRegistrosInput = {
    id?: number
    palabra: string
    deletreo: string
    estado?: $Enums.Estado
  }

  export type PalabraCreateOrConnectWithoutRegistrosInput = {
    where: PalabraWhereUniqueInput
    create: XOR<PalabraCreateWithoutRegistrosInput, PalabraUncheckedCreateWithoutRegistrosInput>
  }

  export type IdiomaUpsertWithoutRegistrosInput = {
    update: XOR<IdiomaUpdateWithoutRegistrosInput, IdiomaUncheckedUpdateWithoutRegistrosInput>
    create: XOR<IdiomaCreateWithoutRegistrosInput, IdiomaUncheckedCreateWithoutRegistrosInput>
    where?: IdiomaWhereInput
  }

  export type IdiomaUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: IdiomaWhereInput
    data: XOR<IdiomaUpdateWithoutRegistrosInput, IdiomaUncheckedUpdateWithoutRegistrosInput>
  }

  export type IdiomaUpdateWithoutRegistrosInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type IdiomaUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type PalabraUpsertWithoutRegistrosInput = {
    update: XOR<PalabraUpdateWithoutRegistrosInput, PalabraUncheckedUpdateWithoutRegistrosInput>
    create: XOR<PalabraCreateWithoutRegistrosInput, PalabraUncheckedCreateWithoutRegistrosInput>
    where?: PalabraWhereInput
  }

  export type PalabraUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: PalabraWhereInput
    data: XOR<PalabraUpdateWithoutRegistrosInput, PalabraUncheckedUpdateWithoutRegistrosInput>
  }

  export type PalabraUpdateWithoutRegistrosInput = {
    palabra?: StringFieldUpdateOperationsInput | string
    deletreo?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type PalabraUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    palabra?: StringFieldUpdateOperationsInput | string
    deletreo?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type RegistroCreateManyIdiomaInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    idPalabra: number
    deletreo?: string | null
    silabas?: string | null
    fonetica?: string | null
    estado?: $Enums.Estado
  }

  export type RegistroUpdateWithoutIdiomaInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
    palabra?: PalabraUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateWithoutIdiomaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    idPalabra?: IntFieldUpdateOperationsInput | number
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type RegistroUncheckedUpdateManyWithoutIdiomaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    idPalabra?: IntFieldUpdateOperationsInput | number
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type RegistroCreateManyPalabraInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    idIdioma: number
    deletreo?: string | null
    silabas?: string | null
    fonetica?: string | null
    estado?: $Enums.Estado
  }

  export type RegistroUpdateWithoutPalabraInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
    idioma?: IdiomaUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateWithoutPalabraInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    idIdioma?: IntFieldUpdateOperationsInput | number
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }

  export type RegistroUncheckedUpdateManyWithoutPalabraInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    idIdioma?: IntFieldUpdateOperationsInput | number
    deletreo?: NullableStringFieldUpdateOperationsInput | string | null
    silabas?: NullableStringFieldUpdateOperationsInput | string | null
    fonetica?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoFieldUpdateOperationsInput | $Enums.Estado
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use IdiomaCountOutputTypeDefaultArgs instead
     */
    export type IdiomaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IdiomaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PalabraCountOutputTypeDefaultArgs instead
     */
    export type PalabraCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PalabraCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IdiomaDefaultArgs instead
     */
    export type IdiomaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IdiomaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PalabraDefaultArgs instead
     */
    export type PalabraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PalabraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegistroDefaultArgs instead
     */
    export type RegistroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegistroDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}